import pandas as pdimport datetime as dtimport pandas_datareader as drimport yahoo_fin.stock_info as siimport yfinance as yfimport statisticsimport FundamentalAnalysis as faimport jsonfrom urllib.request import urlopenfrom datetime import dateclass DCF:    def __init__(self, ticker):        self.ticker = ticker        get = yf.Ticker(ticker)        self.shares = get.info['sharesOutstanding']        self.length = len(income['revenue'])    def revenue(self):        def growth_rate():            growth_rate = statistics.mean((revenue.diff() / revenue.shift(1)).dropna())            print(f'Revenue Growth Rate:', round(growth_rate, 2))            return growth_rate        growth = growth_rate()        rev_5 = int(revenue[-1] * (1 + growth))        rev_6 = int(rev_5 * (1 + growth))        rev_7 = int(rev_6 * (1 + growth))        rev_8 = int(rev_7 * (1 + growth))        rev_9 = int(rev_8 * (1 + growth))        if self.length == 5:            df['Revenue'] = [revenue[-5], revenue[-4], revenue[-3], revenue[-2], revenue[-1], rev_5, rev_6, rev_7, rev_8, rev_9, 'Terminal Value']        if self.length == 4:            df['Revenue'] = ['No data', revenue[-4], revenue[-3], revenue[-2], revenue[-1], rev_5, rev_6, rev_7, rev_8, rev_9, 'Terminal Value']        if self.length == 3:            df['Revenue'] = ['No data', 'No data', revenue[-3], revenue[-2], revenue[-1], rev_5, rev_6, rev_7, rev_8, rev_9, 'Terminal Value']        return df    def free_cashflow_firm(self):        def fcff():            ebit = income['operatingIncome']            ncc = cashflow['depreciationAndAmortization']            change_wc = (balance['totalCurrentAssets'] - balance['totalCurrentLiabilities']).diff()            change_fc = cashflow['capitalExpenditure'].diff()            tax = income['incomeTaxExpense']            fcff = ebit + ncc - change_wc - change_fc - tax            return fcff        fcff = fcff()        def fcff_margin():            margin = statistics.mean(fcff[1:] / income['revenue'][1:])  # todo 2019 ~2020 negative fcff ?            if margin < 0:                margin = max(fcff[1:] / income['revenue'][1:])            print(f'Free cash flow margin', round(margin, 2))            return margin        margin = fcff_margin()        fcff_5 = int(df['Revenue'][4] * margin)        fcff_6 = int(df['Revenue'][5] * margin)        fcff_7 = int(df['Revenue'][6] * margin)        fcff_8 = int(df['Revenue'][7] * margin)        fcff_9 = int(df['Revenue'][8] * margin)        if self.length == 5:            df['FCFF Gordon Growth'] = (fcff[-5], fcff[-4], fcff[-3], fcff[-2], fcff[-1], fcff_5, fcff_6, fcff_7, fcff_8, fcff_9, 'nan')            df['FCFF EV/EBITDA'] = (fcff[-5], fcff[-4], fcff[-3], fcff[-2], fcff[-1], fcff_5, fcff_6, fcff_7, fcff_8, fcff_9, 'nan')        if self.length == 4:            df['FCFF Gordon Growth'] = ('No data', fcff[-4], fcff[-3], fcff[-2], fcff[-1], fcff_5, fcff_6, fcff_7, fcff_8, fcff_9, 'nan')            df['FCFF EV/EBITDA'] = ('No data', fcff[-4], fcff[-3], fcff[-2], fcff[-1], fcff_5, fcff_6, fcff_7, fcff_8, fcff_9, 'nan')        if self.length == 3:            df['FCFF Gordon Growth'] = ('No data', 'No data', fcff[-3], fcff[-2], fcff[-1], fcff_5, fcff_6, fcff_7, fcff_8, fcff_9, 'nan')            df['FCFF EV/EBITDA'] = ('No data', 'No data', fcff[-3], fcff[-2], fcff[-1], fcff_5, fcff_6, fcff_7, fcff_8, fcff_9, 'nan')        return df    @staticmethod    def wacc():        def cost_of_equity():            market_return = 0.10            today = dt.date.today()            start_date = today - dt.timedelta(days=30)            stock_info = si.get_quote_table(ticker, dict_result=True)            beta = stock_info.get('Beta (5Y Monthly)')            rf_rate = dr.DataReader('^TNX', 'yahoo', start_date, today)['Adj Close'][-1] / 100            print('RF rate:', round(rf_rate, 2), '  Beta:', beta)            ke = round(rf_rate + beta * (market_return - rf_rate), 2)            return ke        ke = cost_of_equity()        total_debt = balance['longTermDebt'] + balance['shortTermDebt']        def cost_of_debt():            interest_exp = income['interestExpense']            kd = (-interest_exp / total_debt).dropna()[-1]            tax_rate = income['interestExpense'] / income['incomeBeforeTax']            tax_adj_kd = round(kd * (1 - tax_rate[-1]), 2)            print('Cost of Equity', ke, '   Cost of Debt', tax_adj_kd)            return tax_adj_kd        tax_adj_kd = cost_of_debt()        def weights():            market_cap = (dr.get_quote_yahoo(ticker)['marketCap'])[0]            total_capital = total_debt[-1] + market_cap            w_debt = round(total_debt[-1] / total_capital, 3)            w_equity = round(market_cap / total_capital, 3)            return w_debt, w_equity, market_cap        w_debt, w_equity, market_cap = weights()        wacc = round((w_equity * ke + w_debt * tax_adj_kd), 3)        print('Weight of Equity', w_equity, '   Weight of Debt', w_debt)        print('Required return wacc', wacc)        return wacc, market_cap, total_debt    def gordon_growth_model(self):        def present_enterprise_value():            def terminal_value():                perpetuity_growth = 0.03                terminal = (df['FCFF Gordon Growth'][9] * (1 + perpetuity_growth)) / (wacc - perpetuity_growth)                return terminal            df.replace({'FCFF Gordon Growth': 'nan'}, terminal_value(), inplace=True)            df['Present Value Gordon Growth'] = df['FCFF Gordon Growth'][4:] / ((1 + wacc) ** df['Time'][4:])            present_enterprise_value = sum(df['Present Value Gordon Growth'][4:])            return present_enterprise_value        def equity_value():            equity_value = present_enterprise_value() - balance['netDebt'][-1] - balance['minorityInterest'][-1] - balance['preferredStock'][-1] \                 + balance['cashAndCashEquivalents'][-1]            return equity_value        price_gg = round(equity_value() / self.shares, 2)        results['Gordon Growth'] = (round(equity_value(), 2), round(price_gg, 2))        return price_gg    def exit_multiple_model(self):        def present_enterprise_value():            def terminal_value():                ratios = fa.key_metrics(ticker, api_key, period="annual", TTM=False, limit=40).T.sort_index()                ev_ebitda = ratios['enterpriseValueOverEBITDA']                avg_ev_ebitda = statistics.mean(ev_ebitda)                terminal = income['ebitda'][-1] * avg_ev_ebitda                return terminal            df.replace({'FCFF EV/EBITDA': 'nan'}, terminal_value(), inplace=True)            df['Present Value EV/EBITDA'] = df['FCFF EV/EBITDA'][4:] / ((1 + wacc) ** df['Time'][4:])            present_value = sum(df['Present Value EV/EBITDA'][4:])            return present_value        def equity_value():            ev = present_enterprise_value() - balance['netDebt'][-1] - balance['minorityInterest'][-1] - balance['preferredStock'][-1] \                 + balance['cashAndCashEquivalents'][-1]            return ev        price_multiple = round(equity_value() / self.shares, 2)        results['EV/EBITDA Multiple'] = (round(equity_value(), 2), round(price_multiple, 2))        print('\n', df, '\n', results)        return price_multipleticker = 'TSLA'api_key = 'e95137f175e3fba84a1220c74e5ecd2a'income = ((fa.income_statement(ticker, api_key, period='annual')).T.sort_index())[-5:]balance = ((fa.balance_sheet_statement(ticker, api_key, period='annual')).T.sort_index())[-5:]cashflow = ((fa.cash_flow_statement(ticker, api_key, period='annual')).T.sort_index())[-5:]revenue = income['revenue'].loc[(income['revenue'] != 0)]# Data Framesdf = pd.DataFrame()current = int(date.today().year)df['Year'] = (current-5, current-4, current-3, current-2, current-1, current, current+1, current+2, current+3, current+4, current+4)results = pd.DataFrame()results.index = ('Equity Value', 'Fair Price')dcf = DCF(ticker)df = dcf.revenue()df = dcf.free_cashflow_firm()wacc, market_cap, total_debt = dcf.wacc()df['Time'] = (0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4)dcf.gordon_growth_model()dcf.exit_multiple_model()