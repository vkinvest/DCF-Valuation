import pandas as pdimport datetime as dtimport pandas_datareader as drimport yahoo_fin.stock_info as siimport yfinance as yfimport statisticsimport FundamentalAnalysis as fafrom sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_splitfrom sklearn import metricsclass DCF:    def __init__(self, ticker):        self.ticker = ticker    @staticmethod    def revenue():        def growth_rate():            growth_rate = statistics.mean((revenue.diff() / revenue.shift(1)).dropna())            print(f'Revenue Growth Rate:', round(growth_rate, 2))            return growth_rate        growth = growth_rate()        rev_5 = int(revenue[-1] * (1 + growth))        rev_6 = int(rev_5 * (1 + growth))        rev_7 = int(rev_6 * (1 + growth))        rev_8 = int(rev_7 * (1 + growth))        rev_9 = int(rev_8 * (1 + growth))        df['Revenue'] = [revenue[-4], revenue[-3], revenue[-2], revenue[-1], rev_5, rev_6, rev_7, rev_8, rev_9, 'nan']        return growth, df['Revenue']    @staticmethod    def free_cashflow_firm():        def fcff():            ebit = income['operatingIncome']            ncc = cashflow['depreciationAndAmortization']            change_wc = (balance['totalCurrentAssets'] - balance['totalCurrentLiabilities']).diff()            change_fc = cashflow['capitalExpenditure'].diff()            tax = income['incomeTaxExpense']            fcff = ebit + ncc - change_wc - change_fc - tax            return fcff        fcff = fcff()        def fcff_margin():            margin = statistics.mean(fcff[1:] / income['revenue'][1:])  # todo 2019 ~2020 negative fcff ?            if margin < 0:                margin = max(fcff[1:] / income['revenue'][1:])            print(f'Free cash flow margin', round(margin, 2))            return margin        margin = fcff_margin()        fcff_5 = int(df['Revenue'][4] * margin)        fcff_6 = int(df['Revenue'][5] * margin)        fcff_7 = int(df['Revenue'][6] * margin)        fcff_8 = int(df['Revenue'][7] * margin)        fcff_9 = int(df['Revenue'][8] * margin)        df['FCFF'] = (fcff[-4], fcff[-3], fcff[-2], fcff[-1], fcff_5, fcff_6, fcff_7, fcff_8, fcff_9, 'nan')        return df['FCFF']    @staticmethod    def wacc():        def cost_of_equity():            market_return = 0.10            beta = stock_info.get('Beta (5Y Monthly)')            rf_rate = dr.DataReader('^TNX', 'yahoo', past_date, today)['Adj Close'][-1] / 100            print('RF rate:', round(rf_rate, 2), '  Beta:', beta)            ke = round(rf_rate + beta * (market_return - rf_rate), 2)            return ke        ke = cost_of_equity()        total_debt = balance['longTermDebt'] + balance['shortTermDebt']        def cost_of_debt():            interest_exp = income['interestExpense']            kd = (-interest_exp / total_debt).dropna()[-1]            tax_rate = income['interestExpense'] / income['incomeBeforeTax']            tax_adj_kd = round(kd * (1 - tax_rate[-1]), 2)            print('Cost of Equity', ke, '   Cost of Debt', tax_adj_kd)            return tax_adj_kd        tax_adj_kd = cost_of_debt()        def weights():            market_cap = (dr.get_quote_yahoo(ticker)['marketCap'])[0]            total_capital = total_debt[-1] + market_cap            w_debt = round(total_debt[-1] / total_capital, 3)            w_equity = round(market_cap / total_capital, 3)            return w_debt, w_equity, market_cap        w_debt, w_equity, market_cap = weights()        wacc = round((w_equity * ke + w_debt * tax_adj_kd), 3)        print('Weight of Equity', w_equity, '   Weight of Debt', w_debt)        print('Required return wacc', wacc)        return wacc, market_cap, total_debt    @staticmethod    def present_value():        def terminal_value():            perpetuity_growth = 0.03            terminal = (df['FCFF'][8] * (1 + perpetuity_growth)) / (wacc - perpetuity_growth)            return terminal        df['Time'] = (0, 0, 0, 0, 0, 1, 2, 3, 4, 4)        df.replace({'FCFF': 'nan'}, terminal_value(), inplace=True)        df['Present Value'] = df['FCFF'][4:] / (1 + df['Time'][4:])        print('\n', df)        present_value = sum(df['Present Value'][4:])        print(f'Present Value:', round(present_value, 2))        return present_value    @staticmethod    def share_price():        shares_outstanding = get.info['sharesOutstanding']        share_price = round(present_value / shares_outstanding, 2)        print('\n', f'Intrinsic Value for ticker {ticker}:', share_price)        return share_priceticker = 'FSLY'get = yf.Ticker(ticker)period = 'annual'api_key = 'e95137f175e3fba84a1220c74e5ecd2a'balance = ((fa.balance_sheet_statement(ticker, api_key, period=period)).T.sort_index())[-5:]income = ((fa.income_statement(ticker, api_key, period=period)).T.sort_index())[-5:]cashflow = ((fa.cash_flow_statement(ticker, api_key, period=period)).T.sort_index())[-5:]revenue = income['revenue']net_income = income['netIncome']df = pd.DataFrame()today = dt.date.today()past_date = today - dt.timedelta(days=30)stock_info = si.get_quote_table(ticker, dict_result=True)dcf = DCF(ticker)growth, rev_df = dcf.revenue()df['FCFF'] = dcf.free_cashflow_firm()wacc, market_cap, total_debt = dcf.wacc()present_value = dcf.present_value()share_price = dcf.share_price()class ExitMultiples:    def EV_to_EBITDA(self):        def enterprise_value():            enterprise_value = market_cap + income['Total Debt']        ebitda = income['Ebit'] + cashflow['Depreciation']